{"version":3,"file":"ng-can.umd.js.map","sources":["ng://ng-can/lib/services/ng-can.service.ts","ng://ng-can/lib/directives/can.directive.ts","ng://ng-can/lib/ng-can.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { INgCanPermissions, INgCanPermissionsCheckable } from '../ng-can.typings';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgCanService implements INgCanPermissionsCheckable {\n  private _permissions: INgCanPermissions = {};\n\n  constructor() {\n  }\n\n  loadPermissions(permissions: { [key: string]: boolean }): void {\n    this._permissions = permissions;\n  }\n\n  checkConditions(conditions: INgCanPermissions, strict: boolean) {\n    let show = true;\n\n    for (const key in conditions) {\n      if ((strict && this._permissions[key] === undefined) || this._permissions[key] === conditions[key]) {\n        show = false;\n\n        break;\n      }\n    }\n\n    return show;\n  }\n}\n","import { Directive, ElementRef, Input, OnInit } from '@angular/core';\nimport { NgCanService } from '../services/ng-can.service';\nimport { INgCanPermissions } from '../ng-can.typings';\n\n@Directive({\n  selector: '[ng-can]'\n})\nexport class NgCanDirective implements OnInit {\n  @Input() conditions: INgCanPermissions = {};\n  @Input() permissions: INgCanPermissions = {};\n  @Input() strictMode: boolean;\n\n  constructor(protected el: ElementRef, protected ngCanService: NgCanService) {\n    this.hideElement();\n  }\n\n  ngOnInit(): void {\n    this.ngCanService.loadPermissions(this.permissions);\n    const needToShow = this.ngCanService.checkConditions(this.conditions, this.strictMode);\n\n    if (needToShow) {\n      this.showElement();\n    }\n  }\n\n  hideElement() {\n    this.el.nativeElement.style.visibility = 'hidden';\n  }\n\n  showElement() {\n    this.el.nativeElement.style.visibility = 'visible';\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgCanDirective } from './directives/can.directive';\n\n@NgModule({\n  declarations: [\n    NgCanDirective\n  ],\n  imports: [],\n  exports: [\n    NgCanDirective\n  ]\n})\nexport class NgCanModule {\n}\n"],"names":["Injectable","Directive","ElementRef","Input","NgModule"],"mappings":";;;;;;;;;;AAAA;QASE;YAFQ,iBAAY,GAAsB,EAAE,CAAC;SAG5C;;;;;QAED,sCAAe;;;;YAAf,UAAgB,WAAuC;gBACrD,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;aACjC;;;;;;QAED,sCAAe;;;;;YAAf,UAAgB,UAA6B,EAAE,MAAe;;oBACxD,IAAI,GAAG,IAAI;gBAEf,KAAK,IAAM,GAAG,IAAI,UAAU,EAAE;oBAC5B,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,SAAS,KAAK,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,UAAU,CAAC,GAAG,CAAC,EAAE;wBAClG,IAAI,GAAG,KAAK,CAAC;wBAEb,MAAM;qBACP;iBACF;gBAED,OAAO,IAAI,CAAC;aACb;;oBAzBFA,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;2BALD;KAGA;;;;;;ACHA;QAYE,wBAAsB,EAAc,EAAY,YAA0B;YAApD,OAAE,GAAF,EAAE,CAAY;YAAY,iBAAY,GAAZ,YAAY,CAAc;YAJjE,eAAU,GAAsB,EAAE,CAAC;YACnC,gBAAW,GAAsB,EAAE,CAAC;YAI3C,IAAI,CAAC,WAAW,EAAE,CAAC;SACpB;;;;QAED,iCAAQ;;;YAAR;gBACE,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;;oBAC9C,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC;gBAEtF,IAAI,UAAU,EAAE;oBACd,IAAI,CAAC,WAAW,EAAE,CAAC;iBACpB;aACF;;;;QAED,oCAAW;;;YAAX;gBACE,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC;aACnD;;;;QAED,oCAAW;;;YAAX;gBACE,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,UAAU,GAAG,SAAS,CAAC;aACpD;;oBA3BFC,YAAS,SAAC;wBACT,QAAQ,EAAE,UAAU;qBACrB;;;;;wBANmBC,aAAU;wBACrB,YAAY;;;;iCAOlBC,QAAK;kCACLA,QAAK;iCACLA,QAAK;;QAsBR,qBAAC;KA5BD;;;;;;ACJA;QAGA;SAUC;;oBAVAC,WAAQ,SAAC;wBACR,YAAY,EAAE;4BACZ,cAAc;yBACf;wBACD,OAAO,EAAE,EAAE;wBACX,OAAO,EAAE;4BACP,cAAc;yBACf;qBACF;;QAED,kBAAC;KAVD;;;;;;;;;;;;;;;;;;;;;;;;"}
