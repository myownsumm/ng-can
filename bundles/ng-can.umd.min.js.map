{"version":3,"sources":["ng://ng-can/lib/services/ng-can.service.ts","ng://ng-can/lib/directives/can.directive.ts","ng://ng-can/lib/ng-can.module.ts"],"names":["NgCanService","this","_permissions","prototype","loadPermissions","permissions","checkConditions","conditions","strict","allowed","key","hasOwnProperty","undefined","Injectable","args","providedIn","NgCanDirective","el","ngCanService","hideElement","ngOnInit","strictMode","showElement","nativeElement","style","visibility","Directive","selector","ElementRef","Input","NgCanModule","NgModule","declarations","imports","exports"],"mappings":"0PAAA,IAAAA,EAAA,WASE,SAAAA,IAFQC,KAAAC,aAAkC,UAK1CF,EAAAG,UAAAC,gBAAA,SAAgBC,GACdJ,KAAKC,aAAeG,GAGtBL,EAAAG,UAAAG,gBAAA,SAAgBC,EAA+BC,OACzCC,GAAU,EAEd,IAAK,IAAMC,KAAOH,EAChB,GAAKA,EAAWI,eAAeD,GAA/B,CAIA,GAAIT,KAAKC,aAAaQ,KAASE,UAAW,CACxC,IAAKJ,EACH,SAGFC,GAAU,EACV,MAGF,GAAIR,KAAKC,aAAaQ,KAASH,EAAWG,GAAM,CAC9CD,GAAU,EAEV,OAIJ,OAAOA,uBArCVI,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,sJAJd,GCAAC,EAAA,WAYE,SAAAA,EAAsBC,EAA0BC,GAA1BjB,KAAAgB,GAAAA,EAA0BhB,KAAAiB,aAAAA,EAJvCjB,KAAAM,WAAgC,GAChCN,KAAAI,YAAiC,GAIxCJ,KAAKkB,cAmBT,OAhBEH,EAAAb,UAAAiB,SAAA,WACEnB,KAAKiB,aAAad,gBAAgBH,KAAKI,aACpBJ,KAAKiB,aAAaZ,gBAAgBL,KAAKM,WAAYN,KAAKoB,aAGzEpB,KAAKqB,eAITN,EAAAb,UAAAgB,YAAA,WACElB,KAAKgB,GAAGM,cAAcC,MAAMC,WAAa,UAG3CT,EAAAb,UAAAmB,YAAA,WACErB,KAAKgB,GAAGM,cAAcC,MAAMC,WAAa,+BA1B5CC,EAAAA,UAASZ,KAAA,CAAC,CACTa,SAAU,wDALQC,EAAAA,kBACX5B,yCAON6B,EAAAA,2BACAA,EAAAA,0BACAA,EAAAA,SAsBHb,EAhCA,GCAAc,EAAA,WAGA,SAAAA,KAUA,2BAVCC,EAAAA,SAAQjB,KAAA,CAAC,CACRkB,aAAc,CACZhB,GAEFiB,QAAS,GACTC,QAAS,CACPlB,OAIJc,EAbA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { INgCanPermissions, INgCanPermissionsCheckable } from '../ng-can.typings';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgCanService implements INgCanPermissionsCheckable {\n  private _permissions: INgCanPermissions = {};\n\n  constructor() {\n  }\n\n  loadPermissions(permissions: { [key: string]: boolean }): void {\n    this._permissions = permissions;\n  }\n\n  checkConditions(conditions: INgCanPermissions, strict?: boolean) {\n    let allowed = true;\n\n    for (const key in conditions) {\n      if (!conditions.hasOwnProperty(key)) {\n        continue;\n      }\n\n      if (this._permissions[key] === undefined) {\n        if (!strict) {\n          continue;\n        }\n\n        allowed = false;\n        break;\n      }\n\n      if (this._permissions[key] !== conditions[key]) {\n        allowed = false;\n\n        break;\n      }\n    }\n\n    return allowed;\n  }\n}\n","import { Directive, ElementRef, Input, OnInit } from '@angular/core';\nimport { NgCanService } from '../services/ng-can.service';\nimport { INgCanPermissions } from '../ng-can.typings';\n\n@Directive({\n  selector: '[ng-can]'\n})\nexport class NgCanDirective implements OnInit {\n  @Input() conditions: INgCanPermissions = {};\n  @Input() permissions: INgCanPermissions = {};\n  @Input() strictMode: boolean;\n\n  constructor(protected el: ElementRef, protected ngCanService: NgCanService) {\n    this.hideElement();\n  }\n\n  ngOnInit(): void {\n    this.ngCanService.loadPermissions(this.permissions);\n    const needToShow = this.ngCanService.checkConditions(this.conditions, this.strictMode);\n\n    if (needToShow) {\n      this.showElement();\n    }\n  }\n\n  hideElement() {\n    this.el.nativeElement.style.visibility = 'hidden';\n  }\n\n  showElement() {\n    this.el.nativeElement.style.visibility = 'visible';\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgCanDirective } from './directives/can.directive';\n\n@NgModule({\n  declarations: [\n    NgCanDirective\n  ],\n  imports: [],\n  exports: [\n    NgCanDirective\n  ]\n})\nexport class NgCanModule {\n}\n"]}