{"version":3,"sources":["ng://ng-can/lib/services/ng-can.service.ts","ng://ng-can/lib/module.options.ts","ng://ng-can/lib/directives/can.directive.ts","ng://ng-can/lib/ng-can.module.ts"],"names":["NgCanService","this","_permissions","prototype","loadPermissions","permissions","checkConditions","conditions","strict","allowed","key","hasOwnProperty","undefined","hideElement","el","hideApproach","nativeElement","style","visibility","hidden","Error","showElement","Injectable","args","providedIn","MODULE_OPTIONS","InjectionToken","NgCanDirective","ngCanService","options","hide_approach","ngOnInit","strictMode","Directive","selector","ElementRef","Inject","Input","NgCanModule","forChild","ngModule","providers","provide","useValue","NgModule","declarations","imports","exports"],"mappings":"0PAAA,IAAAA,EAAA,WAcE,SAAAA,IAFQC,KAAAC,aAAkC,UAK1CF,EAAAG,UAAAC,gBAAA,SAAgBC,GACdJ,KAAKC,aAAeG,GAGtBL,EAAAG,UAAAG,gBAAA,SAAgBC,EAA+BC,OACzCC,GAAU,EAEd,IAAK,IAAMC,KAAOH,EAChB,GAAKA,EAAWI,eAAeD,GAA/B,CAIA,GAAIT,KAAKC,aAAaQ,KAASE,UAAW,CACxC,IAAKJ,EACH,SAGFC,GAAU,EACV,MAGF,GAAIR,KAAKC,aAAaQ,KAASH,EAAWG,GAAM,CAC9CD,GAAU,EAEV,OAIJ,OAAOA,GAGTT,EAAAG,UAAAU,YAAA,SAAYC,EAAgBC,GAC1B,OAAQA,GACN,IAAK,aACHD,EAAGE,cAAcC,MAAMC,WAAa,SAEpC,MAGF,IAAK,SACHJ,EAAGE,cAAcG,QAAS,EAE1B,MAGF,QACE,MAAM,IAAIC,MAAM,yBAAyBL,KAI/Cf,EAAAG,UAAAkB,YAAA,SAAYP,EAAgBC,GAC1B,OAAQA,GACN,IAAK,aACHD,EAAGE,cAAcC,MAAMC,WAAa,UAEpC,MAGF,IAAK,SACHJ,EAAGE,cAAcG,QAAS,EAE1B,MAGF,QACE,MAAM,IAAIC,MAAM,yBAAyBL,yBA1EhDO,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,sJATd,GCGaC,EAAiB,IAAIC,EAAAA,eAA+B,kBCHjEC,EAAA,WAcE,SAAAA,EAAsBb,EAA0Bc,EACFC,GADxB5B,KAAAa,GAAAA,EAA0Bb,KAAA2B,aAAAA,EACF3B,KAAA4B,QAAAA,EANrC5B,KAAAM,WAAgC,GAChCN,KAAAI,YAAiC,GAEjCJ,KAAAc,aAA8Bd,KAAK4B,QAAQC,cAwBtD,OAlBEH,EAAAxB,UAAA4B,SAAA,WACE9B,KAAKY,cAELZ,KAAK2B,aAAaxB,gBAAgBH,KAAKI,aACpBJ,KAAK2B,aAAatB,gBAAgBL,KAAKM,WAAYN,KAAK+B,aAGzE/B,KAAKoB,eAITM,EAAAxB,UAAAU,YAAA,WACEZ,KAAK2B,aAAaf,YAAYZ,KAAKa,GAAIb,KAAKc,eAG9CY,EAAAxB,UAAAkB,YAAA,WACEpB,KAAK2B,aAAaP,YAAYpB,KAAKa,GAAIb,KAAKc,mCA7B/CkB,EAAAA,UAASV,KAAA,CAAC,CACTW,SAAU,wDANQC,EAAAA,kBACXnC,qCAcMoC,EAAAA,OAAMb,KAAA,CAACE,4CANnBY,EAAAA,2BACAA,EAAAA,0BACAA,EAAAA,4BACAA,EAAAA,SAwBHV,EApCA,GCAAW,EAAA,WAKA,SAAAA,KAqBA,OAXSA,EAAAC,SAAP,SAAgBV,GACd,MAAO,CACLW,SAAUF,EACVG,UAAW,CACT,CACEC,QAASjB,EACTkB,SAAUd,0BAhBnBe,EAAAA,SAAQrB,KAAA,CAAC,CACRsB,aAAc,CACZlB,GAEFmB,QAAS,GACTC,QAAS,CACPpB,OAeJW,EA1BA","sourcesContent":["import { ElementRef, Injectable } from '@angular/core';\nimport {\n  INgCanPermissions,\n  INgCanPermissionsCheckable,\n  INgCanHideApproachesControllable,\n  THideApproach\n} from '../ng-can.typings';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgCanService implements INgCanPermissionsCheckable, INgCanHideApproachesControllable {\n  private _permissions: INgCanPermissions = {};\n\n  constructor() {\n  }\n\n  loadPermissions(permissions: { [key: string]: boolean }): void {\n    this._permissions = permissions;\n  }\n\n  checkConditions(conditions: INgCanPermissions, strict?: boolean) {\n    let allowed = true;\n\n    for (const key in conditions) {\n      if (!conditions.hasOwnProperty(key)) {\n        continue;\n      }\n\n      if (this._permissions[key] === undefined) {\n        if (!strict) {\n          continue;\n        }\n\n        allowed = false;\n        break;\n      }\n\n      if (this._permissions[key] !== conditions[key]) {\n        allowed = false;\n\n        break;\n      }\n    }\n\n    return allowed;\n  }\n\n  hideElement(el: ElementRef, hideApproach: THideApproach): void {\n    switch (hideApproach) {\n      case 'visibility': {\n        el.nativeElement.style.visibility = 'hidden';\n\n        break;\n      }\n\n      case 'hidden': {\n        el.nativeElement.hidden = true;\n\n        break;\n      }\n\n      default:\n        throw new Error(`Unknown Hide Approach ${hideApproach}`);\n    }\n  }\n\n  showElement(el: ElementRef, hideApproach: THideApproach): void {\n    switch (hideApproach) {\n      case 'visibility': {\n        el.nativeElement.style.visibility = 'visible';\n\n        break;\n      }\n\n      case 'hidden': {\n        el.nativeElement.hidden = false;\n\n        break;\n      }\n\n      default:\n        throw new Error(`Unknown Hide Approach ${hideApproach}`);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { IModuleOptions } from './ng-can.typings';\n\nexport const MODULE_OPTIONS = new InjectionToken<IModuleOptions>('module.options');\n\n","import { Directive, ElementRef, Inject, Input, OnInit } from '@angular/core';\nimport { NgCanService } from '../services/ng-can.service';\nimport { IModuleOptions, INgCanPermissions, THideApproach } from '../ng-can.typings';\nimport { MODULE_OPTIONS } from '../module.options';\n\n@Directive({\n  selector: '[ng-can]'\n})\nexport class NgCanDirective implements OnInit {\n  @Input() conditions: INgCanPermissions = {};\n  @Input() permissions: INgCanPermissions = {};\n  @Input() strictMode: boolean;\n  @Input() hideApproach: THideApproach = this.options.hide_approach;\n\n  constructor(protected el: ElementRef, protected ngCanService: NgCanService,\n              @Inject(MODULE_OPTIONS) protected options: IModuleOptions) {\n  }\n\n  ngOnInit(): void {\n    this.hideElement();\n\n    this.ngCanService.loadPermissions(this.permissions);\n    const needToShow = this.ngCanService.checkConditions(this.conditions, this.strictMode);\n\n    if (needToShow) {\n      this.showElement();\n    }\n  }\n\n  hideElement() {\n    this.ngCanService.hideElement(this.el, this.hideApproach);\n  }\n\n  showElement() {\n    this.ngCanService.showElement(this.el, this.hideApproach);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { NgCanDirective } from './directives/can.directive';\nimport { IModuleOptions } from './ng-can.typings';\nimport { MODULE_OPTIONS } from './module.options';\n\n@NgModule({\n  declarations: [\n    NgCanDirective\n  ],\n  imports: [],\n  exports: [\n    NgCanDirective\n  ]\n})\nexport class NgCanModule {\n  static forChild(options: IModuleOptions): ModuleWithProviders {\n    return {\n      ngModule: NgCanModule,\n      providers: [\n        {\n          provide: MODULE_OPTIONS,\n          useValue: options\n        }\n      ]\n    };\n  }\n}\n"]}